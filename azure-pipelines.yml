# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- origin/master

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install SDK .Net Core 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'  

 # Way 1: Run tests with Report Generator
#- script: dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.6
#  displayName: 'Install Report Generator'
#  condition: always()
#  continueOnError: true

- script: |
      dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.6
      dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools --version 4.8.6
      dotnet new tool-manifest
      dotnet tool install dotnet-reportgenerator-globaltool --version --version 4.8.6
  displayName: 'Install Report Generator (Many)'
  condition: always()
  continueOnError: true

- task: NuGetCommand@2
  displayName: 'Restore Nuget Packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(Solution)'
    feedsToUse: 'select'

- task: MSBuild@1
  displayName: 'Build Solution as "$(BuildConfiguration)"'
  inputs:
    solution: '$(Solution)'
    configuration: $(BuildConfiguration)
    msbuildArchitecture: 'x86' 

- script: dotnet test Project\Backend_.NetCore_3_1\StefaniniCore.sln /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=Project\Backend_.NetCore_3_1\TestResults\Coverage.xml
  displayName: 'Run Tests with Coverage'
  condition: always()
  continueOnError: true
  
- script: reportgenerator '-reports:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\Coverage.xml' '-targetdir:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports' -reporttype:Html
  displayName: 'Run Report Generator'

# ReportGenerator must be performed by NuGetCLI.
#- task: NuGetCommand@2
#  displayName: 'Run Report Generator'
#  inputs:
#    command: 'custom'
#    arguments: reportgenerator '-reports:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\Coverage.xml' '-targetdir:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports' -reporttype:Html
#  condition: always()
#  continueOnError: true

- task: CmdLine@2
  displayName: Show directories for 'NuGetCommand@2'
  inputs:
    script: |
      echo 'Show directories in "Project\Backend_.NetCore_3_1\TestResults\"':
      cd Project\Backend_.NetCore_3_1\TestResults\
      dir
      echo 'Show directories in "$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports"':
      cd $(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports
      dir

# Way 1.1.
- script: dotnet reportgenerator '-reports:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\Coverage.xml' '-targetdir:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports' -reporttype:Html
  displayName: 'Run Report Generator 1'
  condition: always()
  continueOnError: true

- task: CmdLine@2
  displayName: Show directories for 'dotnet reportgenerator'
  inputs:
    script: |
      echo 'Show directories in "Project\Backend_.NetCore_3_1\TestResults\"':
      cd Project\Backend_.NetCore_3_1\TestResults\
      dir
      echo 'Show directories in "$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports"':
      cd $(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports
      dir

- task: DotNetCoreCLI@2
  displayName: 'Run Report Generator 2'
  inputs:
    command: 'custom'
    arguments: dotnet reportgenerator '-reports:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\Coverage.xml' '-targetdir:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports' -reporttype:Html
  condition: always()
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: 'Run Report Generator 3'
  inputs:
    command: 'custom'
    arguments: reportgenerator '-reports:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\Coverage.xml' '-targetdir:$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports' -reporttype:Html
  condition: always()
  continueOnError: true

# Way 2: Run tests.
#- task: VSTest@2
#  displayName: 'Run Tests as "$(BuildConfiguration)"'
#  inputs:
#    testSelector: 'testAssemblies'
#    testAssemblyVer2: |
#      **\$(BuildConfiguration)\**\StefaniniCore.*.Tests.dll
#      !**\obj\**
#    searchFolder: '$(System.DefaultWorkingDirectory)'
#    codeCoverageEnabled: true

- task: FileTransform@1
  displayName: 'File Transform API'
  inputs:
    folderPath: '$(System.DefaultWorkingDirectory)/Project/Backend_.NetCore_3_1/StefaniniCore.API/'
    fileType: 'json'
    targetFiles: '**/appsettings.json'

- task: VSBuild@1
  displayName: 'MSBuild Publish API'
  inputs:
    solution: '$(ProjectApi)'
    msbuildArgs: '/t:Publish  /p:Configuration=Deploy /p:BuildingProject=true;OutDir=$(Build.ArtifactStagingDirectory)\$(ProjectApiArtifact)'
    configuration: '$(BuildConfiguration)'
    clean: true
    msbuildArchitecture: 'x86'

- task: VSBuild@1
  displayName: 'MSBuild Publish Web'
  inputs:
    solution: '$(ProjectWeb)'
    msbuildArgs: '/t:Publish /p:Configuration=Deploy /p:BuildingProject=true;OutDir=$(Build.ArtifactStagingDirectory)\$(ProjectWebArtifact)'
    configuration: '$(BuildConfiguration)'
    clean: true
    msbuildArchitecture: 'x86'

- task: PublishBuildArtifacts@1
  displayName: 'Generate Artifacts Publishes'
  condition: always()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop/Publishes'
    publishLocation: 'Container'

# Way 1.2.
- task: PublishBuildArtifacts@1
  displayName: 'Generate Artifacts Report Coverage'
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)\Project\Backend_.NetCore_3_1\TestResults\CodeReports'
    ArtifactName: 'drop/ReportCoverage'
    publishLocation: 'Container'
  continueOnError: true