# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- origin/master

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Install SDK .Net Core 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'  
      
- task: NuGetCommand@2
  displayName: 'Restore Nuget Packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(Solution)'
    feedsToUse: 'select'

- task: MSBuild@1
  displayName: 'Build Solution as "$(BuildConfiguration)"'
  inputs:
    solution: '$(Solution)'
    msbuildArchitecture: 'x86' 

# Way 1: Run tests with Report Generator
- script: dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.6
  displayName: 'Install Report Generator'
  condition: always()

# Way 1.1.
- script: |
    cd $(PathTestResults)
    ls
    cs $(ls -d */|head -n 1)
    reportgenerator '-reports:coverage.cobertura.xml' '-targetdir:coveragereport' -reporttype:Html
  displayName: Run Report Generator
  condition: always()

# Way 2: Run tests.
#- task: VSTest@2
#  displayName: 'Run Tests as "$(BuildConfiguration)"'
#  inputs:
#    testSelector: 'testAssemblies'
#    testAssemblyVer2: |
#      **\$(BuildConfiguration)\**\StefaniniCore.*.Tests.dll
#      !**\obj\**
#    searchFolder: '$(System.DefaultWorkingDirectory)'
#    codeCoverageEnabled: true

- task: FileTransform@1
  displayName: 'File Transform API'
  inputs:
    folderPath: '$(System.DefaultWorkingDirectory)/Project/Backend_.NetCore_3_1/StefaniniCore.API/'
    fileType: 'json'
    targetFiles: '**/appsettings.json'

- task: VSBuild@1
  displayName: 'MSBuild Publish API'
  inputs:
    solution: '$(ProjectApi)'
    msbuildArgs: '/t:Publish  /p:Configuration=Deploy /p:BuildingProject=true;OutDir=$(Build.ArtifactStagingDirectory)\$(ProjectApiArtifact)'
    configuration: '$(BuildConfiguration)'
    clean: true
    msbuildArchitecture: 'x86'

- task: VSBuild@1
  displayName: 'MSBuild Publish Web'
  inputs:
    solution: '$(ProjectWeb)'
    msbuildArgs: '/t:Publish /p:Configuration=Deploy /p:BuildingProject=true;OutDir=$(Build.ArtifactStagingDirectory)\$(ProjectWebArtifact)'
    configuration: '$(BuildConfiguration)'
    clean: true
    msbuildArchitecture: 'x86'

- task: PublishBuildArtifacts@1
  displayName: 'Generate Artifacts Publishes'
  condition: always()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop/Publishes'
    publishLocation: 'Container'

# Way 1.2.
- task: PublishBuildArtifacts@1
  displayName: 'Generate Artifacts Report Coverage'
  inputs:
    PathtoPublish: '$(PathTestResults)'
    ArtifactName: 'drop/ReportCoverage'
    publishLocation: 'Container'